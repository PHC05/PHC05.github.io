<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Cai Dog&#39;S BLOG</title>
  
  <subtitle>A bit madness is key to give us new corlor to see</subtitle>
  <link href="https://phc05.github.io/atom.xml" rel="self"/>
  
  <link href="https://phc05.github.io/"/>
  <updated>2023-04-01T05:19:06.292Z</updated>
  <id>https://phc05.github.io/</id>
  
  <author>
    <name>DDD</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>自适应论文</title>
    <link href="https://phc05.github.io/posts/94c3f0b.html"/>
    <id>https://phc05.github.io/posts/94c3f0b.html</id>
    <published>2023-04-01T03:16:02.000Z</published>
    <updated>2023-04-01T05:19:06.292Z</updated>
    
    <content type="html"><![CDATA[<h1 id="自适应填充"><a href="#自适应填充" class="headerlink" title="自适应填充"></a>自适应填充</h1><h2 id="面临问题"><a href="#面临问题" class="headerlink" title="面临问题"></a>面临问题</h2><ul><li><p>过度提高隐私安全会让流量很大</p></li><li><p>有时当前的流量很小，但是用于保护隐私的发包也并未得到提升</p></li><li><p>现有方案不足：主要在于是静态，动态的：根据MTU填充也有被识别的风险</p><img src="/posts/undefined/0ad79c9bc9faa3ef82ed530e599a43fe508215481.png@1284w.webp" class="" alt="img"></li></ul><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ul><li>自适应填充：根据流量大小自适应决定bytes，并且要使得隐私得到最大程度的保证</li><li>a padding strategy that specifies the number of bytes inserted</li><li>a padding mechanism that implements the padding strategy and acts as a middlebox to modify packet size</li><li>an SDN application on top of the controller responsible for obtaining information of network traffic and managing the padding mechanism</li><li>a representational state transfer (REST) application programming interface (API) that allows communication between the SDN application and the padding mechanism</li></ul><h3 id="restful-api架构"><a href="#restful-api架构" class="headerlink" title="restful api架构"></a>restful api架构</h3><ul><li><p><strong>所谓”资源”，就是网络上的一个实体，或者说是网络上的一个具体信息。</strong></p><blockquote><p>它可以是一段文本、一张图片、一首歌曲、一种服务，总之就是一个具体的实在。你可以用一个URI（统一资源标识符）指向它，每种资源对应一个特定的URI。要获取这个资源，访问它的URI就可以，因此URI就成了每一个资源的地址或独一无二的识别符</p></blockquote><pre class="line-numbers language-none"><code class="language-none">附：URI：Uniform Resource Identifier，统一资源标识符URL：Uniform Resource Location统一资源定位符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><strong>表现层（Representation）</strong></p><blockquote><p>“资源”是一种信息实体，它可以有多种外在表现形式。<strong>我们把”资源”具体呈现出来的形式，叫做它的”表现层”（Representation）。</strong></p></blockquote><blockquote><p>比如，文本可以用txt格式表现，也可以用HTML格式、XML格式、JSON格式表现，甚至可以采用二进制格式；图片可以用JPG格式表现，也可以用PNG格式表现。</p></blockquote><blockquote><p>URI只代表资源的实体，不代表它的形式。严格地说，有些网址最后的”.html”后缀名是不必要的，因为这个后缀名表示格式，属于”表现层”范畴，而URI应该只代表”资源”的位置。它的具体表现形式，应该在HTTP请求的头信息中用Accept和Content-Type字段指定，这两个字段才是对”表现层”的描述。</p></blockquote></li><li><p><strong>状态转化（State Transfer）</strong></p><blockquote><p>访问一个网站，就代表了客户端和服务器的一个互动过程。在这个过程中，势必涉及到数据和状态的变化。</p></blockquote><blockquote><p>互联网通信协议HTTP协议，是一个无状态协议。这意味着，所有的状态都保存在服务器端。因此，<strong>如果客户端想要操作服务器，必须通过某种手段，让服务器端发生”状态转化”（State Transfer）。而这种转化是建立在表现层之上的，所以就是”表现层状态转化”。</strong></p></blockquote><blockquote><p>客户端用到的手段，只能是HTTP协议。具体来说，就是HTTP协议里面，四个表示操作方式的动词：GET、POST、PUT、DELETE。它们分别对应四种基本操作：<strong>GET用来获取资源，POST用来新建资源（也可以用于更新资源），PUT用来更新资源，DELETE用来删除资源。</strong></p></blockquote></li><li><p><strong>综述</strong></p><p>综合上面的解释，我们总结一下什么是RESTful架构：<br> 　　　（1）每一个URI代表一种资源；<br> 　　　（2）客户端和服务器之间，传递这种资源的某种表现层；<br> 　　　（3）客户端通过四个HTTP动词，对服务器端资源进行操作，实现”表现层状态转化”。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;自适应填充&quot;&gt;&lt;a href=&quot;#自适应填充&quot; class=&quot;headerlink&quot; title=&quot;自适应填充&quot;&gt;&lt;/a&gt;自适应填充&lt;/h1&gt;&lt;h2 id=&quot;面临问题&quot;&gt;&lt;a href=&quot;#面临问题&quot; class=&quot;headerlink&quot; title=&quot;面临问题&quot;</summary>
      
    
    
    
    
    <category term="信安" scheme="https://phc05.github.io/tags/%E4%BF%A1%E5%AE%89/"/>
    
  </entry>
  
  <entry>
    <title>SDN</title>
    <link href="https://phc05.github.io/posts/94caaf6d.html"/>
    <id>https://phc05.github.io/posts/94caaf6d.html</id>
    <published>2023-04-01T03:15:02.000Z</published>
    <updated>2023-04-01T03:15:24.648Z</updated>
    
    
    
    
    
    <category term="SDN" scheme="https://phc05.github.io/tags/SDN/"/>
    
  </entry>
  
  <entry>
    <title>试试图片上传</title>
    <link href="https://phc05.github.io/posts/83538815.html"/>
    <id>https://phc05.github.io/posts/83538815.html</id>
    <published>2023-03-04T05:43:17.000Z</published>
    <updated>2023-03-13T09:18:24.445Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hexo图片上传问题解决"><a href="#hexo图片上传问题解决" class="headerlink" title="hexo图片上传问题解决"></a>hexo图片上传问题解决</h1><p>基础配置后发现图片无法上传</p><img src="/posts/83538815/image-20230313170944147.png" class="" alt="image-20230313170944147"><h2 id="修改配置文件config-yml"><a href="#修改配置文件config-yml" class="headerlink" title="修改配置文件config.yml"></a>修改配置文件config.yml</h2><pre class="line-numbers language-none"><code class="language-none">post_asset_folder: true<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置之后会在</p><pre class="line-numbers language-none"><code class="language-none">hexo n xx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>生成一个与markdown同名的文件夹（我主要用于管理文件）</p><h2 id="修改typora图片设置"><a href="#修改typora图片设置" class="headerlink" title="修改typora图片设置"></a>修改typora图片设置</h2><p>设置如图</p><img src="/posts/83538815/image-20230313170415592.png" class="" alt="image-20230313170415592"><pre class="line-numbers language-none"><code class="language-none">.&#x2F;$&#123;filename&#125;&#x2F; 复制时会将图片保存在同名文件夹<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>复制时会将图片保存在同名文件夹，就不用单独去放了</p><h2 id="安装hexo官方图片配置插件"><a href="#安装hexo官方图片配置插件" class="headerlink" title="安装hexo官方图片配置插件"></a>安装hexo官方图片配置插件</h2><p>在根目录运行cmd</p><pre class="line-numbers language-none"><code class="language-none">npm install hexo-asset-image -- save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装即可</p><p>配置过后图片上传成功</p><img src="/posts/83538815/123.png" class="" alt="123">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;hexo图片上传问题解决&quot;&gt;&lt;a href=&quot;#hexo图片上传问题解决&quot; class=&quot;headerlink&quot; title=&quot;hexo图片上传问题解决&quot;&gt;&lt;/a&gt;hexo图片上传问题解决&lt;/h1&gt;&lt;p&gt;基础配置后发现图片无法上传&lt;/p&gt;
&lt;img src=&quot;/p</summary>
      
    
    
    
    
    <category term="blog配置" scheme="https://phc05.github.io/tags/blog%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>notes</title>
    <link href="https://phc05.github.io/posts/11ba68c.html"/>
    <id>https://phc05.github.io/posts/11ba68c.html</id>
    <published>2023-03-03T14:15:13.000Z</published>
    <updated>2023-03-03T15:12:18.092Z</updated>
    
    <content type="html"><![CDATA[<h2 id="物联网威胁的概述"><a href="#物联网威胁的概述" class="headerlink" title="物联网威胁的概述"></a>物联网威胁的概述</h2><h3 id="威胁现状"><a href="#威胁现状" class="headerlink" title="威胁现状"></a>威胁现状</h3><ul><li>虽然当前已有面向物联网安全的综述研究， 但是专门对现有研究工作提出的攻击和检测防御 方案的总结分析较少</li></ul><h3 id="背景简介"><a href="#背景简介" class="headerlink" title="背景简介"></a>背景简介</h3><ul><li><p>感知层：感知层对应的是各类物联网设备。设备通过传 感器实时收集应用场景信息并发送给应用层，或接 收应用层指令并执行相应动作。设备的内部架构可 以分为硬件层、系统层、用户层。其中，硬件层包 括支持设备功能的各种硬件模组（如网络模组、传 感器模组等）、处理器、外围电路等；系统层装载 了固件程序，其中包括操作系统和应用程序，负责 设备功能的实现；用户层主要向用户提供展示数据 和接收输入的操作接口。</p></li><li><p>网络层对应的是设备之间，以及设备、云平台、 手机 App 这三类实体之间的通信。设备之间可以通 过 ZigBee、Z-Wave 等轻量级协议形成自组网络（如 工业设备网络、无人机集群）；设备也可以经路由 器连接后形成局域网（如智能家居网络）。设备连 接路由器有 2 种形式：一是直接通过 Wi-Fi 连接； 二是通过 ZigBee、Z-Wave 等协议与网关设备（如 hub）连接后，再经网关通过 Wi-Fi 与路由器通信。 实体之间通信分为 3 种类型：1) 设备与 App 通信，设备既可以通过蓝牙直接连接手机（如可穿 戴设备、车载系统网络），也可以通过局域网 Wi-Fi 与手机通信（如智能家居网络）；2) 设备与云平台 通信，设备依靠路由器转发请求和接收响应，而路 由器与云平台的通信主要由传统 TCP&#x2F;IP 网络架构 实现；3) 手机与云平台通信：手机 App 可以通过 4G&#x2F;5G 网络或局域网 Wi-Fi 连接云平台。</p></li><li><p>应用层对应的主要是云平台和手机 App。云平 台主要由厂商在云端部署的各类应用服务组成，负责管理设备和用户，对设备收集的数据进行处理， 或向设备发送远程控制命令。根据云平台提供的功 能，可以将其分为设备接入平台、服务联动平台、 语音助手平台 3 种。设备接入平台提供了实际的设 备接入和管理功能，如 Samsung SmartThings、 Google Home、Philips Hue、小米米家等；服务联动 平台并没有连接真实的设备，而是将其他平台的功 能连接起来，提供“条件−动作”自动执行规则服 务，如 IFTTT 平台等；语音助手平台通过智能音箱 向用户提供语音控制服务，用户发出的语音命令经 语音平台处理后可以与其他控制设备的功能或服 务连接到一起，如 Amazon Alexa 等。另外，不同 云平台之间也可以在授权后，通过互相调用 API （application programming interface）执行设备控制。 手机 App 可看作云平台向用户提供的控制终端，主 要用于向用户提供设备相关的功能界面，可以直观 展示设备状态，或者执行控制命令。</p></li></ul><h3 id="八类漏洞"><a href="#八类漏洞" class="headerlink" title="八类漏洞"></a>八类漏洞</h3><p>！:通信流量测信道信息泄露</p><p>检测： 基于侧信道的设备异常检测 受到攻击的设备除了内部功能受到影响之外， 其外在的各类侧信道特征也会表现出异常，因此可 以利用此特点进行设备的异常检测。 首先，设备与网络交互过程中产生的流量可以 反映设备内部的行为，所以可以通过提取流量特征 来检测设备的状态。一方面，可以提取流量中未加 密的头部信息识别异常设备[73-75]。例如，Yu 等[74] 基于设备通信中常见的广播和多播协议，将协议特 征看作设备整体特征的一种视图，然后基于多视图 学习算法进行设备签名，可以在具有大量设备的复 杂环境中准确识别异常或伪造的设备。另一方面， 可以提取加密流量的统计特征，如数据包长度、时 间戳等。Zhang 等[75]利用 ZigBee 和 Z-Wave 协议的 流量特征设计了识别 SmartThings 平台设备行为系 统，可以通过流量判断设备是否出现异常行为。 其次，设备工作过程中表现出的外在物理特 征，如电量、电压、速度、重力、方向等，也可以 反映设备的运行状态，部分研究基于物理特征实现 设备异常检测[76-78]。例如，Choi 等[78]对无人机和地 面探测器提取控制时的设备参数、物理运动数值、底层控制算法等数据作为正常运行标准，任何偏离 标准的微小偏差都被视为异常，以此检测来自物理 或网络的攻击。 此外，有部分研究基于邻近的设备或传感器对 于活动发生时的物理环境感知应具有上下文一致 性这一特点，将邻近设备的状态和动作数据作为特 征进行恶意行为识别[79-80]。例如，Birnbach 等[79]基 于智能家居环境中多个传感器对同一事件的感知 数据集合作为签名，可以检测出由于传感器故障或 攻击者造成的欺骗事件。</p><p>防御手段：</p><p>为了应对形式多样的通信流量侧信道分析，部 分研究关注如何隐藏流量特征。流量特征推理主 要是提取流量中的头部特征和统计特征，所以对 应的防御方案是消除这 2 种特征与设备和活动的 对应关系。 对于头部特征，主要目标是在不影响流量转发 和不改变负载数据的基础上进行头部信息的再次 封装，令攻击者无法获得有意义的头部信息。例如， 通过DNS加密技术阻止对网络请求目标的分析[30]； 通过隧道转发技术将设备与云服务之间的通信转 换为 VPN 节点之间的通信，间接阻止了对设备的 识别和行为推理[33,75]。对于统计特征，主要目标是 在不破坏正常功能的前提下，改变流量的整体特征。例如，在正常通信过程中注入欺骗流量妨碍窃 听者对真实设备和活动的识别[32]；或采用流量塑形 技术，通过增加发送时延或注入无关流量来降低或 提高单位时间内的通信速率，改变流量传输曲线的 形状，以混淆攻击者对行为的提取</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;物联网威胁的概述&quot;&gt;&lt;a href=&quot;#物联网威胁的概述&quot; class=&quot;headerlink&quot; title=&quot;物联网威胁的概述&quot;&gt;&lt;/a&gt;物联网威胁的概述&lt;/h2&gt;&lt;h3 id=&quot;威胁现状&quot;&gt;&lt;a href=&quot;#威胁现状&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    
    <category term="信息安全" scheme="https://phc05.github.io/tags/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://phc05.github.io/posts/4a17b156.html"/>
    <id>https://phc05.github.io/posts/4a17b156.html</id>
    <published>2022-09-08T10:29:10.300Z</published>
    <updated>2023-03-02T07:25:55.929Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
